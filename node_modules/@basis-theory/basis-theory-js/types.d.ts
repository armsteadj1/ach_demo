import type { BasisTheoryElements } from './elements';
declare type InitStatus = 'not-started' | 'in-progress' | 'done' | 'error';
declare type Clients = 'tokens' | 'atomic' | 'applications' | 'reactorFormulas' | 'reactors' | 'atomicBanks' | 'atomicCards' | 'permissions' | 'logs' | 'tenants';
declare type ClientsBasePathMap = {
    [key in Clients]: string;
};
declare type Providers = 'BROWSER' | 'NODE';
declare const algorithm: readonly ["RSA", "AES"];
declare type Algorithm = typeof algorithm[number];
interface EncryptionProviderOptions {
    defaultKeySize: number;
    keyExpirationInDays: number;
}
interface EncryptionOptions {
    algorithm: Algorithm;
    options?: EncryptionProviderOptions;
}
interface BasisTheoryInitOptions {
    apiBaseUrl?: string;
    elements?: boolean;
    elementsBaseUrl?: string;
}
interface Auditable {
    createdBy?: string;
    createdAt?: string;
    modifiedBy?: string;
    modifiedAt?: string;
}
declare global {
    interface Window {
        BasisTheoryElements?: BasisTheoryElements;
    }
}
export { algorithm };
export type { InitStatus, Clients, ClientsBasePathMap, Providers, Algorithm, EncryptionProviderOptions, EncryptionOptions, BasisTheoryInitOptions, Auditable, };
