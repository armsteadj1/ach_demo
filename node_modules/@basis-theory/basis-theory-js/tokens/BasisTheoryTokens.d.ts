import { BasisTheoryServiceOptions, PaginatedList, RequestOptions } from '../service';
import type { Token, CreateTokenModel, ListTokensQuery, RetrieveTokenQuery, ListTokensQueryDecrypted } from './types';
export declare const BasisTheoryTokens: {
    new (options: BasisTheoryServiceOptions): {
        retrieve(id: string, query?: RetrieveTokenQuery, options?: RequestOptions): Promise<Token>;
        retrieveDecrypted(id: string, query?: RetrieveTokenQuery, options?: RequestOptions): Promise<Token>;
        listDecrypted(query?: ListTokensQueryDecrypted, options?: RequestOptions): Promise<PaginatedList<Token>>;
        createAssociation(parentId: string, childId: string, options?: RequestOptions | undefined): Promise<void>;
        deleteAssociation(parentId: string, childId: string, options?: RequestOptions | undefined): Promise<void>;
        createChild(parentId: string, token: CreateTokenModel, options?: RequestOptions | undefined): Promise<Token>;
        listChildren(parentId: string, query?: ListTokensQuery, options?: RequestOptions): Promise<PaginatedList<Token>>;
        readonly client: import("axios").AxiosInstance;
    };
} & (new (...args: any[]) => import("../service/CrudBuilder").ICreate<Token, Pick<Token, "data" | "type" | "metadata" | "encryption" | "children">>) & (new (...args: any[]) => import("../service/CrudBuilder").IDelete) & (new (...args: any[]) => import("../service/CrudBuilder").IList<Token, ListTokensQuery>);
export declare type BasisTheoryTokens = InstanceType<typeof BasisTheoryTokens>;
