"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasisTheoryTokens = void 0;

var _common = require("../common");

var _utils = require("../common/utils");

var _service = require("../service");

var _CrudBuilder = require("../service/CrudBuilder");

const BasisTheoryTokens = new _CrudBuilder.CrudBuilder(class BasisTheoryTokens extends _service.BasisTheoryService {
  constructor(options) {
    const _options = options; // eslint-disable-next-line unicorn/prefer-spread

    _options.transformRequest = [].concat(_utils.transformTokenRequestSnakeCase, options.transformRequest || []); // eslint-disable-next-line unicorn/prefer-spread

    _options.transformResponse = [].concat(_utils.transformTokenResponseCamelCase, options.transformResponse || []);
    super(_options);
  }

  retrieve(id, query = {}, options = {}) {
    const url = `/${id}${(0, _common.getQueryParams)(query)}`;
    return this.client.get(url, (0, _common.createRequestConfig)(options)).then(_utils.dataExtractor);
  }

  retrieveDecrypted(id, query = {}, options = {}) {
    const url = `/${id}/decrypt${(0, _common.getQueryParams)(query)}`;
    return this.client.get(url, (0, _common.createRequestConfig)(options)).then(_utils.dataExtractor);
  }

  listDecrypted(query = {}, options = {}) {
    const url = `/decrypt${(0, _common.getQueryParams)(query)}`;
    return this.client.get(url, (0, _common.createRequestConfig)(options)).then(_utils.dataExtractor);
  }

  async createAssociation(parentId, childId, options) {
    const url = `/${parentId}/children/${childId}`;
    await this.client.post(url, {}, (0, _common.createRequestConfig)(options));
  }

  async deleteAssociation(parentId, childId, options) {
    const url = `/${parentId}/children/${childId}`;
    await this.client.delete(url, (0, _common.createRequestConfig)(options));
  }

  createChild(parentId, token, options) {
    const url = `/${parentId}/children`;
    return this.client.post(url, token, (0, _common.createRequestConfig)(options)).then(_utils.dataExtractor);
  }

  listChildren(parentId, query = {}, options = {}) {
    const url = `/${parentId}/children${(0, _common.getQueryParams)(query)}`;
    return this.client.get(url, (0, _common.createRequestConfig)(options)).then(_utils.dataExtractor);
  }

}).create().delete().list().build();
exports.BasisTheoryTokens = BasisTheoryTokens;