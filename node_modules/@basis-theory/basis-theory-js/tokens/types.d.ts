import type { PaginatedQuery } from '../service';
import type { Auditable } from '../types';
declare type Primitive = string | number | boolean | null;
declare type DataObject = {
    [member: string]: TokenData;
};
declare type DataArray = Array<TokenData>;
declare type TokenData = Primitive | DataObject | DataArray;
declare type TokenType = 'token' | 'card' | 'bank';
interface TokenEncryptionKey {
    key: string;
    alg: string;
}
interface TokenEncryption {
    cek: TokenEncryptionKey;
    kek: TokenEncryptionKey;
}
interface Token extends Auditable {
    id: string;
    tenantId: string;
    type: TokenType;
    data: TokenData;
    fingerprint?: string;
    metadata?: Record<string, string>;
    encryption?: TokenEncryption;
    children?: Token[];
}
declare type CreateTokenModel = Pick<Token, 'type' | 'data' | 'metadata' | 'encryption' | 'children'>;
interface RetrieveTokenQuery {
    children?: boolean;
    childrenType?: TokenType | TokenType[];
}
interface ListTokensQuery extends PaginatedQuery {
    id?: string | string[];
    type?: TokenType | TokenType[];
    children?: boolean;
    childrenType?: TokenType | TokenType[];
}
interface ListTokensQueryDecrypted extends ListTokensQuery {
    decryptType?: TokenType | TokenType[];
}
export type { Primitive, DataObject, DataArray, TokenData, TokenType, TokenEncryptionKey, TokenEncryption, Token, CreateTokenModel, RetrieveTokenQuery, ListTokensQuery, ListTokensQueryDecrypted, };
