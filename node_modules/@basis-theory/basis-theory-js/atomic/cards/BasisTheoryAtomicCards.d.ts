import type { BasisTheoryServiceOptions, PaginatedQuery, RequestOptions } from '../../service';
import type { ReactRequest, ReactResponse } from '../types';
import type { AtomicCard, UpdateAtomicCardModel } from './types';
export declare const BasisTheoryAtomicCards: {
    new (options: BasisTheoryServiceOptions): {
        update(id: string, request: UpdateAtomicCardModel, options?: RequestOptions | undefined): Promise<AtomicCard>;
        retrieveDecrypted(id: string, options?: RequestOptions | undefined): Promise<AtomicCard>;
        react(id: string, request: ReactRequest, options?: RequestOptions | undefined): Promise<ReactResponse>;
        readonly client: import("axios").AxiosInstance;
    };
} & (new (...args: any[]) => import("../../service/CrudBuilder").ICreate<AtomicCard, Pick<AtomicCard, "card" | "metadata" | "billingDetails">>) & (new (...args: any[]) => import("../../service/CrudBuilder").IRetrieve<AtomicCard>) & (new (...args: any[]) => import("../../service/CrudBuilder").IDelete) & (new (...args: any[]) => import("../../service/CrudBuilder").IList<AtomicCard, PaginatedQuery>);
export declare type BasisTheoryAtomicCards = InstanceType<typeof BasisTheoryAtomicCards>;
