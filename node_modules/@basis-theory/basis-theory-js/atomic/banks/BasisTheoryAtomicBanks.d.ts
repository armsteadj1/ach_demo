import type { BasisTheoryServiceOptions, PaginatedQuery, RequestOptions } from '../../service';
import type { ReactRequest, ReactResponse } from '../types';
import type { AtomicBank, UpdateAtomicBankModel } from './types';
export declare const BasisTheoryAtomicBanks: {
    new (options: BasisTheoryServiceOptions): {
        update(id: string, request: UpdateAtomicBankModel, options?: RequestOptions | undefined): Promise<AtomicBank>;
        retrieveDecrypted(id: string, options?: RequestOptions | undefined): Promise<AtomicBank>;
        react(id: string, request: ReactRequest, options?: RequestOptions | undefined): Promise<ReactResponse>;
        readonly client: import("axios").AxiosInstance;
    };
} & (new (...args: any[]) => import("../../service/CrudBuilder").ICreate<AtomicBank, Pick<AtomicBank, "bank" | "metadata">>) & (new (...args: any[]) => import("../../service/CrudBuilder").IRetrieve<AtomicBank>) & (new (...args: any[]) => import("../../service/CrudBuilder").IDelete) & (new (...args: any[]) => import("../../service/CrudBuilder").IList<AtomicBank, PaginatedQuery>);
export declare type BasisTheoryAtomicBanks = InstanceType<typeof BasisTheoryAtomicBanks>;
