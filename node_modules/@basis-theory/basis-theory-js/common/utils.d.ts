import type { AxiosRequestConfig, AxiosResponse, AxiosTransformer } from 'axios';
import type { RequestOptions } from '../service';
declare const assertInit: <T>(prop: T) => NonNullable<T>;
declare const transformRequestSnakeCase: AxiosTransformer;
declare const proxyRawResponse: AxiosTransformer;
declare const transformReactorRequestSnakeCase: AxiosTransformer;
declare const transformAtomicRequestSnakeCase: AxiosTransformer;
declare const transformTokenRequestSnakeCase: AxiosTransformer;
declare const transformAtomicReactionRequestSnakeCase: AxiosTransformer;
declare const transformTokenResponseCamelCase: AxiosTransformer;
declare const transformReactorResponseCamelCase: AxiosTransformer;
declare const transformResponseCamelCase: AxiosTransformer;
declare const transformAtomicResponseCamelCase: AxiosTransformer;
declare const dataExtractor: <T>(res: AxiosResponse<T>) => T;
declare const concatRequestTransformerWithDefault: (requestTransformer: AxiosTransformer | AxiosTransformer[]) => AxiosTransformer | AxiosTransformer[] | undefined;
declare const concatResponseTransformermWithDefault: (responseTransformer: AxiosTransformer | AxiosTransformer[]) => AxiosTransformer | AxiosTransformer[] | undefined;
declare const createRequestConfig: (options?: RequestOptions | undefined, transformers?: Pick<AxiosRequestConfig, "transformRequest" | "transformResponse"> | undefined) => AxiosRequestConfig | undefined;
declare const errorInterceptor: (error: any) => void;
declare const getQueryParams: <Q>(query: Q) => string;
export { assertInit, transformRequestSnakeCase, proxyRawResponse, transformReactorRequestSnakeCase, transformAtomicRequestSnakeCase, transformTokenRequestSnakeCase, transformAtomicReactionRequestSnakeCase, transformTokenResponseCamelCase, transformReactorResponseCamelCase, transformResponseCamelCase, transformAtomicResponseCamelCase, dataExtractor, createRequestConfig, concatRequestTransformerWithDefault, concatResponseTransformermWithDefault, errorInterceptor, getQueryParams, };
