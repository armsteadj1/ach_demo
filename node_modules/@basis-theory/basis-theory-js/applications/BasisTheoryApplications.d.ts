import { RequestOptions } from '../service';
import type { Application, ApplicationQuery, CreateApplicationModel } from './types';
export declare const BasisTheoryApplications: {
    new (options: import("../service/types").BasisTheoryServiceOptions): {
        /**
         * @deprecated use {@link retrieveByKey} instead
         */
        getApplicationByKey(): Promise<Application>;
        retrieveByKey(options?: RequestOptions | undefined): Promise<Application>;
        regenerateKey(id: string, options?: RequestOptions | undefined): Promise<Application>;
        readonly client: import("axios").AxiosInstance;
    };
} & (new (...args: any[]) => import("../service/CrudBuilder").ICreate<Application, CreateApplicationModel>) & (new (...args: any[]) => import("../service/CrudBuilder").IRetrieve<Application>) & (new (...args: any[]) => import("../service/CrudBuilder").IUpdate<Application, Partial<Pick<Application, "permissions" | "name">>>) & (new (...args: any[]) => import("../service/CrudBuilder").IDelete) & (new (...args: any[]) => import("../service/CrudBuilder").IList<Application, ApplicationQuery>);
export declare type BasisTheoryApplications = InstanceType<typeof BasisTheoryApplications>;
