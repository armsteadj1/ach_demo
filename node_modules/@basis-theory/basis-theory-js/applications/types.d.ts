import type { PaginatedQuery } from '../service';
import type { Auditable } from '../types';
declare const APPLICATION_TYPES: readonly ["server_to_server", "public", "elements", "management"];
declare type ApplicationType = typeof APPLICATION_TYPES[number];
interface Application extends Auditable {
    id: string;
    tenantId: string;
    name: string;
    key?: string;
    type: ApplicationType;
    permissions: string[];
}
declare type CreateApplicationModel = Pick<Application, 'name' | 'type'> & Partial<Pick<Application, 'permissions'>>;
declare type UpdateApplicationModel = Partial<Pick<Application, 'name' | 'permissions'>>;
interface ApplicationQuery extends PaginatedQuery {
    id?: string | string[];
}
export { APPLICATION_TYPES, ApplicationType, Application, CreateApplicationModel, UpdateApplicationModel, ApplicationQuery, };
