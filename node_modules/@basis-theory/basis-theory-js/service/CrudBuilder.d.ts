import { BasisTheoryService } from './BasisTheoryService';
import type { RequestOptions, PaginatedList, PaginatedQuery } from './types';
declare type BasisTheoryServiceConstructor<T extends BasisTheoryService = BasisTheoryService> = new (...params: any[]) => T;
declare type ICreate<T, C> = {
    create(model: C, options?: RequestOptions): Promise<T>;
};
declare type IRetrieve<T> = {
    retrieve(id: string, options?: RequestOptions): Promise<T>;
};
declare type IUpdate<T, U> = {
    update(id: string, model: U, options?: RequestOptions): Promise<T>;
};
declare type IDelete = {
    delete(id: string, options?: RequestOptions): Promise<void>;
};
declare type IList<T, Q extends PaginatedQuery> = {
    list(query?: Q, options?: RequestOptions): Promise<PaginatedList<T>>;
};
declare type ICreateConstructor<T, C> = new (...args: any[]) => ICreate<T, C>;
declare type IRetrieveConstructor<T> = new (...args: any[]) => IRetrieve<T>;
declare type IUpdateConstructor<T, U> = new (...args: any[]) => IUpdate<T, U>;
declare type IDeleteConstructor = new (...args: any[]) => IDelete;
declare type IListConstructor<T, Q extends PaginatedQuery> = new (...args: any[]) => IList<T, Q>;
declare class CrudBuilder<Class extends BasisTheoryServiceConstructor> {
    private BaseService;
    constructor(baseService: Class);
    create<T, C>(): CrudBuilder<Class & ICreateConstructor<T, C>>;
    retrieve<T>(): CrudBuilder<Class & IRetrieveConstructor<T>>;
    update<T, U>(): CrudBuilder<Class & IUpdateConstructor<T, U>>;
    delete(): CrudBuilder<Class & IDeleteConstructor>;
    list<T, Q extends PaginatedQuery>(): CrudBuilder<Class & IListConstructor<T, Q>>;
    build(): Class;
}
export { CrudBuilder };
export type { ICreate, IRetrieve, IUpdate, IDelete, IList };
